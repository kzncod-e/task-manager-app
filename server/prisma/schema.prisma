// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId            Int     @id @default(autoincrement())
  cognitoId         String  @unique
  username          String  @unique
  profilePictureUrl String?
  teamId            Int?

  authoredTasks   Task[] @relation("TaskAuthor")
  assignedTasks   Task[] @relation("TaskAssignee")
  taskAssignments TaskAssignment[]
  attachments     Attachment[]
  comments        Comment[] // Fixed typo here
  team            Team?            @relation(fields: [teamId], references: [id])
}

model Team {
  id                   Int           @id @default(autoincrement())
  teamName             String
  productOwnerUserId   Int?
  projectManagerUserId Int?
  projectTeams         ProjectTeam[]
  user                 User[]
}

model Project {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  startDate   DateTime?
  endDate     DateTime?
  tasks       Task[]
  projectTeam ProjectTeam[]
}

model ProjectTeam { // Fixed casing here
  id        Int     @id @default(autoincrement())
  teamId    Int
  projectId Int
  team      Team    @relation(fields: [teamId], references: [id])
  project   Project @relation(fields: [projectId], references: [id])
}

model Task {
  id              Int              @id @default(autoincrement())
  title           String
  description     String?
  status          String?
  priority        String?
  tags            String[]
  startDate       DateTime?
  dueDate         DateTime?
  points          Int?
  projectId       Int
  authorUserId    Int
  assignedUserId  Int?
  project         Project          @relation(fields: [projectId], references: [id])
  // person who created the task
  author          User             @relation("TaskAuthor", fields: [authorUserId], references: [userId])
  // person who is assigned to the task
  assignee        User?             @relation("TaskAssignee", fields: [assignedUserId], references: [userId])
  taskAssignments TaskAssignment[]
  attachments     Attachment[]
  comments        Comment[]
  userUserId Int?
}

model TaskAssignment {
  id     Int  @id @default(autoincrement())
  userId Int
  taskId Int
  user   User @relation(fields: [userId], references: [userId])
  task   Task @relation(fields: [taskId], references: [id])
}

model Attachment {
  id           Int     @id @default(autoincrement())
  fileURL      String?
  fileName     String?
  taskId       Int
  uploadedById Int
  // type have to same as the model name
  task         Task    @relation(fields: [taskId], references: [id])
  // sm
  uploadedBy   User    @relation(fields: [uploadedById], references: [userId])
}

model Comment {
  id         Int    @id @default(autoincrement())
  text       String
  taskId     Int
  userId     Int
  task       Task   @relation(fields: [taskId], references: [id])
  user User   @relation(fields: [userId], references: [userId])
}
